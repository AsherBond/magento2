<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright 2025 Adobe
  * All Rights Reserved.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCancelSalesOrderPlacedWithPaypalPayflowLinkTest">
        <annotations>
            <features value="Payflow"/>
            <stories value="Payment Payflow Link methods"/>
            <title value="Sales Order Cancellation Using PayPal Payflow Link"/>
            <description value="Admin can cancel orders placed by customers using PayPal Payflow"/>
            <severity value="MAJOR"/>
            <testCaseId value="AC-5429"/>
            <group value="3rd_party_integration"/>
        </annotations>
        <before>
            <!-- Simple product is created -->
            <createData entity="simpleProductWithoutCategory" stepKey="createProduct">
                <field key="price">10.00</field>
            </createData>
            <!-- US Customer is created -->
            <createData entity="Simple_US_Customer" stepKey="createCustomer"/>
            <!-- Precondition Step1: Login To admin -->
            <actionGroup ref="AdminLoginActionGroup" stepKey="login"/>
            <actionGroup ref="AdminEnablePayPalPayFlowLinkActionGroup" stepKey="ConfigPayPalPayFlowLink">
                <argument name="credentials" value="SamplePaypalPaymentsFlowLinkConfig"/>
            </actionGroup>
            <actionGroup ref="LoginToStorefrontActionGroup" stepKey="loginToStorefrontAccount">
                <argument name="Customer" value="$$createCustomer$$"/>
            </actionGroup>
            <!-- Add product to cart -->
            <actionGroup ref="AddSimpleProductToCartActionGroup" stepKey="addProductToCart">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <actionGroup ref="StorefrontOpenCheckoutPageActionGroup" stepKey="goToCheckout"/>
            <actionGroup ref="CheckoutSelectFlatRateShippingMethodActionGroup" stepKey="selectFlatRateShippingMethod"/>
            <actionGroup ref="StorefrontCheckoutClickNextButtonActionGroup" stepKey="clickNext"/>
            <!-- Click on PayPal payment radio button -->
            <waitForElementClickable selector="{{CheckoutPaymentSection.PayPalPayflowLinkRadio}}" stepKey="waitForPayPalRadioButton"/>
            <click selector="{{CheckoutPaymentSection.PayPalPayflowLinkRadio}}" stepKey="selectPaypalPayment"/>
            <checkOption selector="{{CheckoutPaymentSection.selectCheckboxforBilling}}" stepKey="selectCheckboxForBilling"/>
            <click selector="{{CheckoutPaymentSection.cntinuebtn}}" stepKey="submitContinueButton"/>
            <actionGroup ref="StorefrontSwitchToPayPalPayflowActionGroup" stepKey="switchToPaypalPayflowIframe"/>
            <actionGroup ref="StorefrontFillCreditCardDetailsActionGroup" stepKey="inputCreditCardNumberFillCreditCardDetails"/>
            <waitForPageLoad stepKey="waitForOrderData"/>
            <grabTextFrom selector="{{CheckoutSuccessMainSection.orderNumber22}}" stepKey="grabOrderNumber"/>
            <!-- Go to order page & Open the order-->
            <actionGroup ref="FilterOrderGridByIdActionGroup" stepKey="filterOrderById">
                <argument name="orderId" value="$grabOrderNumber"/>
            </actionGroup>
            <actionGroup ref="AdminOrderGridClickFirstRowActionGroup" stepKey="clickOrderRow"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <deleteData createDataKey="createCustomer" stepKey="deleteCustomer"/>
            <createData entity="RollbackPaypalPayflowPro" stepKey="rollbackPaypalPayflowProConfig"/>
            <!-- Logout from storefront -->
            <actionGroup ref="StorefrontCustomerLogoutActionGroup" stepKey="logoutCustomer"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <waitForPageLoad stepKey="waitPage"/>
        <!-- Step 4&5: Click on Cancel button then OK Button-->
        <actionGroup ref="CancelPendingOrderActionGroup" stepKey="cancelOrder"/>
        <!-- Step6: Observe the Data -->
        <actionGroup ref="AdminOrderViewCheckStatusActionGroup" stepKey="seeAdminOrderStatus">
            <argument name="status" value="Canceled"/>
        </actionGroup>
        <waitForElementVisible selector="{{AdminOrderDetailsInformationSection.paymentInformationField('Last Transaction ID')}}" stepKey="waitForTransactionIDFieldToBeAppeared"/>
        <grabTextFrom selector="{{AdminOrderDetailsInformationSection.paymentInformationField('Last Transaction ID')}}" stepKey="grabTransactionID"/>
        <actionGroup ref="AdminOpenOrderCommentsHistoryActionGroup" stepKey="clickOnCommentsHistory"/>
        <waitForText selector="{{AdminOrderCommentsTabSection.orderCommentsWithType('Canceled order')}}" userInput="Canceled order online Amount: $15.00. Transaction ID: &quot;{$grabTransactionID}&quot;" stepKey="seeOrderHistoryNotesAfterCancelingOrder"/>
        <actionGroup ref="AdminOpenTransactionsTabActionGroup" stepKey="openTransactionTypeHasAuthorization">
            <argument name="transactionType" value="authorization"/>
        </actionGroup>
        <waitForText selector="{{AdminTransactionsGridSection.transactionData('Is Closed')}}" userInput="Yes" stepKey="seeIfClosedHeaderIsSetAsYesForAuthorization"/>
        <waitForElementClickable selector="{{AdminProductFormActionSection.backButton}}" stepKey="waitForBackButtonToBeClicked"/>
        <click selector="{{AdminProductFormActionSection.backButton}}" stepKey="clickBackButton"/>
        <actionGroup ref="AdminOpenTransactionsTabActionGroup" stepKey="openTransactionTypeHasVoid">
            <argument name="transactionType" value="void"/>
        </actionGroup>
        <waitForText selector="{{AdminTransactionsGridSection.transactionData('Is Closed')}}" userInput="Yes" stepKey="seeIfClosedHeaderIsSetAsYesForVoid"/>
    </test>
</tests>
